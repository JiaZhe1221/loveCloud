{"ast":null,"code":"var _jsxFileName = \"/Users/f4lk0n/Documents/\\uD83D\\uDC23/prg/love-in-the-clouds/src/components/CloudFormation.js\",\n  _s = $RefreshSig$();\n// src/components/CloudFormation.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CloudFormation = ({\n  onChangeBackground\n}) => {\n  _s();\n  const [clouds, setClouds] = useState([]);\n  const [currentQuote, setCurrentQuote] = useState('');\n  const [cloudCount, setCloudCount] = useState(0); // Counter for the number of clouds\n  const colors = ['#FF8585', '#FFC3A0', '#FFD700', '#98FB98', '#87CEEB']; // Array of colors\n  const quotes = [\"You are the sunshine in my life.\", \"My love for you is endless.\", \"You complete me.\", \"You make my heart skip a beat.\", \"Forever yours.\"]; // Array of quotes\n\n  const addCloud = () => {\n    if (cloudCount < quotes.length) {\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      const randomQuote = quotes[cloudCount]; // Use the quote corresponding to the current cloud count\n\n      const newCloud = /*#__PURE__*/_jsxDEV(\"div\", {\n        // Use timestamp as a unique key to avoid rendering issues\n        className: \"text-2xl mb-4 cursor-pointer\",\n        style: {\n          color: randomColor\n        },\n        onClick: () => handleCloudClick(randomQuote),\n        children: \"\\u2601\\uFE0F\"\n      }, Date.now(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n      setClouds([...clouds, newCloud]);\n      setCloudCount(cloudCount + 1); // Increment the cloud count\n      onChangeBackground(); // Change the background color\n    }\n  };\n  const handleCloudClick = quote => {\n    setCurrentQuote(quote); // Update the current quote state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bg-blue-500 text-white px-4 py-2 rounded-md mt-4\",\n      onClick: addCloud,\n      disabled: cloudCount >= quotes.length // Disable the button when the maximum clouds are reached\n      ,\n      children: \"Add Cloud\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 mb-4 mt-6\",\n      children: clouds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), currentQuote && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl\",\n      children: currentQuote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(CloudFormation, \"bdIQTgphSlf3fLIkECAnmXPimPo=\");\n_c = CloudFormation;\nexport default CloudFormation;\nvar _c;\n$RefreshReg$(_c, \"CloudFormation\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CloudFormation","onChangeBackground","_s","clouds","setClouds","currentQuote","setCurrentQuote","cloudCount","setCloudCount","colors","quotes","addCloud","length","randomColor","Math","floor","random","randomQuote","newCloud","className","style","color","onClick","handleCloudClick","children","Date","now","fileName","_jsxFileName","lineNumber","columnNumber","quote","disabled","_c","$RefreshReg$"],"sources":["/Users/f4lk0n/Documents/üê£/prg/love-in-the-clouds/src/components/CloudFormation.js"],"sourcesContent":["// src/components/CloudFormation.js\nimport React, { useState } from 'react';\n\nconst CloudFormation = ({ onChangeBackground }) => {\n  const [clouds, setClouds] = useState([]);\n  const [currentQuote, setCurrentQuote] = useState('');\n  const [cloudCount, setCloudCount] = useState(0); // Counter for the number of clouds\n  const colors = ['#FF8585', '#FFC3A0', '#FFD700', '#98FB98', '#87CEEB']; // Array of colors\n  const quotes = [\n    \"You are the sunshine in my life.\",\n    \"My love for you is endless.\",\n    \"You complete me.\",\n    \"You make my heart skip a beat.\",\n    \"Forever yours.\"\n  ]; // Array of quotes\n\n  const addCloud = () => {\n    if (cloudCount < quotes.length) {\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      const randomQuote = quotes[cloudCount]; // Use the quote corresponding to the current cloud count\n\n      const newCloud = (\n        <div\n          key={Date.now()} // Use timestamp as a unique key to avoid rendering issues\n          className=\"text-2xl mb-4 cursor-pointer\"\n          style={{ color: randomColor }}\n          onClick={() => handleCloudClick(randomQuote)}\n        >\n          ‚òÅÔ∏è\n        </div>\n      );\n\n      setClouds([...clouds, newCloud]);\n      setCloudCount(cloudCount + 1); // Increment the cloud count\n      onChangeBackground(); // Change the background color\n    }\n  };\n\n  const handleCloudClick = (quote) => {\n    setCurrentQuote(quote); // Update the current quote state\n  };\n\n  return (\n    <div>\n      <button\n        className=\"bg-blue-500 text-white px-4 py-2 rounded-md mt-4\"\n        onClick={addCloud}\n        disabled={cloudCount >= quotes.length} // Disable the button when the maximum clouds are reached\n      >\n        Add Cloud\n      </button>\n      <div className=\"flex space-x-4 mb-4 mt-6\">{clouds}</div>\n      {currentQuote && <p className=\"text-xl\">{currentQuote}</p>}\n    </div>\n  );\n};\n\nexport default CloudFormation;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAMY,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;EACxE,MAAMC,MAAM,GAAG,CACb,kCAAkC,EAClC,6BAA6B,EAC7B,kBAAkB,EAClB,gCAAgC,EAChC,gBAAgB,CACjB,CAAC,CAAC;;EAEH,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIJ,UAAU,GAAGG,MAAM,CAACE,MAAM,EAAE;MAC9B,MAAMC,WAAW,GAAGJ,MAAM,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,MAAM,CAACG,MAAM,CAAC,CAAC;MACrE,MAAMK,WAAW,GAAGP,MAAM,CAACH,UAAU,CAAC,CAAC,CAAC;;MAExC,MAAMW,QAAQ,gBACZnB,OAAA;QACmB;QACjBoB,SAAS,EAAC,8BAA8B;QACxCC,KAAK,EAAE;UAAEC,KAAK,EAAER;QAAY,CAAE;QAC9BS,OAAO,EAAEA,CAAA,KAAMC,gBAAgB,CAACN,WAAW,CAAE;QAAAO,QAAA,EAC9C;MAED,GANOC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMZ,CACN;MAED1B,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEe,QAAQ,CAAC,CAAC;MAChCV,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/BN,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACxB;EACF,CAAC;EAED,MAAMsB,gBAAgB,GAAIQ,KAAK,IAAK;IAClCzB,eAAe,CAACyB,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEhC,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MACEoB,SAAS,EAAC,kDAAkD;MAC5DG,OAAO,EAAEX,QAAS;MAClBqB,QAAQ,EAAEzB,UAAU,IAAIG,MAAM,CAACE,MAAO,CAAC;MAAA;MAAAY,QAAA,EACxC;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT/B,OAAA;MAAKoB,SAAS,EAAC,0BAA0B;MAAAK,QAAA,EAAErB;IAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACvDzB,YAAY,iBAAIN,OAAA;MAAGoB,SAAS,EAAC,SAAS;MAAAK,QAAA,EAAEnB;IAAY;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAAC5B,EAAA,CApDIF,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AAsDpB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}